# Strings Builder
“A Builder is used to efficiently build a string using Write methods. It minimizes memory copying.” — Go doc

Chris Joyce
24 August 2022
chris@joyce.id.au

## Introduction

In this article we are going to look how we can use strings. Builder to build and concatenate strings.

## Example usecase without using strings.Builder

Lets assume a simple use case where we have string slice and from which we have to create a string that contains all the elements.

.play -edit strings_builder/without/main.go /START OMIT/,/END OMIT/

Every time the code **ret += str** executes, a new string is created.

Because strings are immutable in Go.

To avoid this we can use strings builder.

: This code is fine. But every time the code ret += str executes
: a new string is created (new string needs to be allocated in memory)
: Because strings are immutable in Go


## Same usecase using strings.Builder

.play -edit strings_builder/using/main.go /START OMIT/,/END OMIT/

Here we have used strings.Builder to build the string. 

_Builder is like a backing array._

_It has Len and Cap. Whenever len not fit in cap, the cap will grow._



## Lets see whats happening in the backend

.play -edit strings_builder/backend/main.go /START OMIT/,/END OMIT/

Here in this code I have printed some stuffs that helps to understand how the Builder buffer grows.


## Reset

We can also reset the builder and reuse it if required (based on the requirement)

.play -edit strings_builder/reset/main.go /START OMIT/,/END OMIT/

We can also write the bytes, rune to the builder buffer using **WriteByte** , **WriteRune** methods respectively.

: After the reset, the data is resetted (data is erased).
: Thats why I have assigned the data in the Builder to the result variable “result = sb.String()” before calling “sb.Reset()”.


## Benchmarking

.code strings_builder/benchmark/formatString_test.go /START OMIT/,/END OMIT/

## Results

    go test -bench=.  -benchmem -run=^# -count=5

    goos: darwin
    goarch: amd64
    pkg: github.com/chrisjoyce911/talk-optional-parameters/strings_builder/benchmark
    cpu: Intel(R) Core(TM) i5-8500 CPU @ 3.00GHz
    Benchmark_formatString-6          161946              7532 ns/op           43816 B/op         55 allocs/op
    Benchmark_formatString-6          142192              7534 ns/op           43816 B/op         55 allocs/op
    Benchmark_formatString-6          138440              7478 ns/op           43816 B/op         55 allocs/op
    Benchmark_formatString-6          143678              7426 ns/op           43816 B/op         55 allocs/op
    Benchmark_formatString-6          159788              7541 ns/op           43816 B/op         55 allocs/op
    Benchmark_builderString-6         315973              3906 ns/op           16216 B/op         40 allocs/op
    Benchmark_builderString-6         272908              3807 ns/op           16216 B/op         40 allocs/op
    Benchmark_builderString-6         280107              3801 ns/op           16216 B/op         40 allocs/op
    Benchmark_builderString-6         276476              3753 ns/op           16216 B/op         40 allocs/op
    Benchmark_builderString-6         271591              3797 ns/op           16216 B/op         40 allocs/op
    PASS
    ok      github.com/chrisjoyce911/talk-optional-parameters/strings_builder/benchmark     14.485s